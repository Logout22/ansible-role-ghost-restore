sudo: required

services:
  - docker

env:
  - distribution: debian
    version: buster
  - distribution: debian
    version: stretch
  - distribution: ubuntu
    version: bionic
  - distribution: ubuntu
    version: focal

before_install:
  - 'sudo docker pull ${distribution}:${version}'
  - 'sudo docker build --no-cache --rm --file=travis/Dockerfile.${distribution}-${version} --tag=${distribution}-${version}:ansible travis'

script:
  - container_id=$(mktemp)
  - 'sudo docker run --detach --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro --volume="${PWD}":/etc/ansible/roles/ansible-role-ghost-restore:ro ${distribution}-${version}:ansible > "${container_id}"'
  - 'sudo docker exec "$(cat ${container_id})" env ANSIBLE_FORCE_COLOR=1 ansible-galaxy install -r /etc/ansible/roles/ansible-role-ghost-restore/roles/requirements.yml'
  - 'sudo docker exec "$(cat ${container_id})" env ANSIBLE_FORCE_COLOR=1 ansible-playbook -v /etc/ansible/roles/ansible-role-ghost-restore/tests/test.yml --syntax-check'
  - 'sudo docker exec "$(cat ${container_id})" env ANSIBLE_FORCE_COLOR=1 ansible-lint /etc/ansible/roles/ansible-role-ghost-restore'
  - >
    sudo docker exec "$(cat ${container_id})" env ANSIBLE_FORCE_COLOR=1 ansible-playbook
    -e aws_access_key=$AWS_ACCESS_KEY_ID
    -e aws_secret_key=$AWS_SECRET_ACCESS_KEY
    -v /etc/ansible/roles/ansible-role-ghost-restore/tests/test.yml
  - >
    sudo docker exec "$(cat ${container_id})" env ANSIBLE_FORCE_COLOR=1 ansible-playbook
    -e aws_access_key=$AWS_ACCESS_KEY_ID
    -e aws_secret_key=$AWS_SECRET_ACCESS_KEY
    -v /etc/ansible/roles/ansible-role-ghost-restore/tests/test.yml
    | grep -q 'changed=0.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)
  - 'sudo docker rm -f "$(cat ${container_id})"'
